syntax = "proto3";

package gen_grpc;

// generate command：
// golang（proto 文件中不指定 go_package）：
//    protoc --go_out=. --go_opt=paths=source_relative --go_opt=Mapi.proto='social_server/src/gen/grpc;gen_grpc' --go-grpc_out=. --go-grpc_opt=paths=source_relative --go-grpc_opt=Mapi.proto='social_server/src/gen/grpc;gen_grpc' ./api.proto
// golang：
//    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./api.proto
// js:
//    protoc --js_out=import_style=commonjs:. --grpc-web_out=import_style=commonjs,mode=grpcwebtext:. api.proto
option go_package = "social_server/src/gen/grpc;gen_grpc";


// Session Service
service GrpcApi {
  // 会话
  rpc SessUserLogin(SessUserLoginReq) returns (SessUserLoginRes);
  rpc SessUserLogout(SessUserLogoutReq) returns (SessUserLogoutRes);

  // 用户管理
  rpc UmRegister(UmRegisterReq) returns (UmRegisterRes);
  rpc UmUnregister(UmUnregisterReq) returns (UmUnregisterRes);
  rpc UmAddFriend(UmAddFriendReq) returns (UmAddFriendRes);
  rpc UmDelFriend(UmDelFriendReq) returns (UmDelFriendRes);
  rpc UmGetFriendList(UmGetFriendListReq) returns (UmGetFriendListRes);

  // 聊天
  rpc ChatSendMsg(ChatSendMsgReq) returns (ChatSendMsgRes);
  rpc ChatCreateGroup(ChatCreateGroupReq) returns (ChatCreateGroupRes);
  rpc ChatGetGroupList(ChatGetGroupListReq) returns (ChatGetGroupListRes);

  // 更新事件
  rpc GetUpdateList(GetUpdateListReq) returns (GetUpdateListRes);
}

enum ErrCode {
  emErrCode_Ok = 0;
  emErrCode_UnknownErr = 1;

  emErrCode_UserNotRegistered = 10;
  emErrCode_UserAlreadyRegistered = 11;
  emErrCode_UserFailedToAuth = 12;

  emErrCode_SessNotExisted = 20;

  emErrCode_ConvIdNotExisted = 30;
  emErrCode_UserNotInConv = 31;
}

// 会话接口参数
message SessUserLoginReq {
  string username = 1;
  string password = 2;
}
message SessUserLoginRes {
  ErrCode errCode = 1;
  string sessId = 2;
  uint64 uid = 3;
}

message SessUserLogoutReq {
  string sessId = 1;
}
message SessUserLogoutRes {
  ErrCode errCode = 1;
}

// 用户管理接口参数
message UmFriendInfo {
  uint64 uid = 1;
  string username = 2;
  string nickname = 3;
  string noteName = 4;
}

message UmRegisterReq {
  string username = 1;
  string password = 2;
  string email = 3;
}
message UmRegisterRes {
  ErrCode errCode = 1;
}

message UmUnregisterReq {
  string sessId = 1;
}
message UmUnregisterRes {
  ErrCode errCode = 1;
}

message UmAddFriendReq {
  string sessId = 1;
  UmFriendInfo friend = 2;
}
message UmAddFriendRes {
  ErrCode errCode = 1;
}

message UmDelFriendReq {
  string sessId = 1;
  uint64 friendUid = 2;
}
message UmDelFriendRes {
  ErrCode errCode = 1;
}

message UmGetFriendListReq {
  string sessId = 1;
}
message UmGetFriendListRes {
  ErrCode errCode = 1;
  repeated UmFriendInfo friendList = 2;
}


// 聊天接口参数
message ChatPeerId {
  oneof PeerIdUnion {
    uint64 uid = 1;
    uint64 groupId = 2;
  }
}

enum ChatMsgType {
  emChatMsgType_Text = 0;
}

message ChatMsg {
  uint64 senderUid = 1;     // 发送消息时忽略此字段
  uint64 sentTsMs = 2;
  ChatMsgType msgType = 3;
  string msgContent = 4;
}

message ChatConvMsg {
  uint64 msgId = 1;         // 发送消息时忽略此字段
  uint64 randMsgId = 2;     // 由客户端生成随机ID
  ChatPeerId receiverId = 3;
  ChatMsg msg = 4;
}

message ChatConvInfo {
  uint64 convId = 1;
  repeated uint64 uidList = 2;
}

message ChatSendMsgReq {
  string sessId = 1;
  ChatConvMsg convMsg = 2;
}
message ChatSendMsgRes {
  ErrCode errCode = 1;
}

message ChatCreateGroupReq {
  string sessId = 1;
}
message ChatCreateGroupRes {
  ErrCode errCode = 1;
  uint64 convId = 2;
}

message ChatGetGroupListReq {
  string sessId = 1;
}
message ChatGetGroupListRes {
  ErrCode errCode = 1;
  repeated uint64 convIdList = 2;
}

message GetUpdateListReq {
  string sessId = 1;
  uint64 localSeqId = 2;
}
message GetUpdateListRes {
  ErrCode errCode = 1;
  uint64 seqId = 2;
  repeated ChatConvMsg msgList = 3;
}
