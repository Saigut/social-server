// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: api.proto

package gen_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcApiClient is the client API for GrpcApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcApiClient interface {
	// 会话
	SessUserLogin(ctx context.Context, in *SessUserLoginReq, opts ...grpc.CallOption) (*SessUserLoginRes, error)
	SessUserLogout(ctx context.Context, in *SessUserLogoutReq, opts ...grpc.CallOption) (*SessUserLogoutRes, error)
	// 用户管理
	UmRegister(ctx context.Context, in *UmRegisterReq, opts ...grpc.CallOption) (*UmRegisterRes, error)
	UmUnregister(ctx context.Context, in *UmUnregisterReq, opts ...grpc.CallOption) (*UmUnregisterRes, error)
	UmAddFriends(ctx context.Context, in *UmAddFriendsReq, opts ...grpc.CallOption) (*UmAddFriendsRes, error)
	UmDelFriends(ctx context.Context, in *UmDelFriendsReq, opts ...grpc.CallOption) (*UmDelFriendsRes, error)
	UmListFriends(ctx context.Context, in *UmListFriendsReq, opts ...grpc.CallOption) (*UmListFriendsRes, error)
	// 聊天
	ChatGetChatMsg(ctx context.Context, in *ChatGetChatMsgReq, opts ...grpc.CallOption) (*ChatGetChatMsgRes, error)
	ChatGetChatMsgHistWith(ctx context.Context, in *ChatGetChatMsgHistWithReq, opts ...grpc.CallOption) (*ChatGetChatMsgHistWithRes, error)
	ChatSendChatMsgTo(ctx context.Context, in *ChatSendChatMsgToReq, opts ...grpc.CallOption) (*ChatSendChatMsgToRes, error)
	ChatGetChatConvId(ctx context.Context, in *ChatGetChatConvIdReq, opts ...grpc.CallOption) (*ChatGetChatConvIdRes, error)
}

type grpcApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcApiClient(cc grpc.ClientConnInterface) GrpcApiClient {
	return &grpcApiClient{cc}
}

func (c *grpcApiClient) SessUserLogin(ctx context.Context, in *SessUserLoginReq, opts ...grpc.CallOption) (*SessUserLoginRes, error) {
	out := new(SessUserLoginRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/SessUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) SessUserLogout(ctx context.Context, in *SessUserLogoutReq, opts ...grpc.CallOption) (*SessUserLogoutRes, error) {
	out := new(SessUserLogoutRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/SessUserLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmRegister(ctx context.Context, in *UmRegisterReq, opts ...grpc.CallOption) (*UmRegisterRes, error) {
	out := new(UmRegisterRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmUnregister(ctx context.Context, in *UmUnregisterReq, opts ...grpc.CallOption) (*UmUnregisterRes, error) {
	out := new(UmUnregisterRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmUnregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmAddFriends(ctx context.Context, in *UmAddFriendsReq, opts ...grpc.CallOption) (*UmAddFriendsRes, error) {
	out := new(UmAddFriendsRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmAddFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmDelFriends(ctx context.Context, in *UmDelFriendsReq, opts ...grpc.CallOption) (*UmDelFriendsRes, error) {
	out := new(UmDelFriendsRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmDelFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmListFriends(ctx context.Context, in *UmListFriendsReq, opts ...grpc.CallOption) (*UmListFriendsRes, error) {
	out := new(UmListFriendsRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmListFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) ChatGetChatMsg(ctx context.Context, in *ChatGetChatMsgReq, opts ...grpc.CallOption) (*ChatGetChatMsgRes, error) {
	out := new(ChatGetChatMsgRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/ChatGetChatMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) ChatGetChatMsgHistWith(ctx context.Context, in *ChatGetChatMsgHistWithReq, opts ...grpc.CallOption) (*ChatGetChatMsgHistWithRes, error) {
	out := new(ChatGetChatMsgHistWithRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/ChatGetChatMsgHistWith", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) ChatSendChatMsgTo(ctx context.Context, in *ChatSendChatMsgToReq, opts ...grpc.CallOption) (*ChatSendChatMsgToRes, error) {
	out := new(ChatSendChatMsgToRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/ChatSendChatMsgTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) ChatGetChatConvId(ctx context.Context, in *ChatGetChatConvIdReq, opts ...grpc.CallOption) (*ChatGetChatConvIdRes, error) {
	out := new(ChatGetChatConvIdRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/ChatGetChatConvId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcApiServer is the server API for GrpcApi service.
// All implementations must embed UnimplementedGrpcApiServer
// for forward compatibility
type GrpcApiServer interface {
	// 会话
	SessUserLogin(context.Context, *SessUserLoginReq) (*SessUserLoginRes, error)
	SessUserLogout(context.Context, *SessUserLogoutReq) (*SessUserLogoutRes, error)
	// 用户管理
	UmRegister(context.Context, *UmRegisterReq) (*UmRegisterRes, error)
	UmUnregister(context.Context, *UmUnregisterReq) (*UmUnregisterRes, error)
	UmAddFriends(context.Context, *UmAddFriendsReq) (*UmAddFriendsRes, error)
	UmDelFriends(context.Context, *UmDelFriendsReq) (*UmDelFriendsRes, error)
	UmListFriends(context.Context, *UmListFriendsReq) (*UmListFriendsRes, error)
	// 聊天
	ChatGetChatMsg(context.Context, *ChatGetChatMsgReq) (*ChatGetChatMsgRes, error)
	ChatGetChatMsgHistWith(context.Context, *ChatGetChatMsgHistWithReq) (*ChatGetChatMsgHistWithRes, error)
	ChatSendChatMsgTo(context.Context, *ChatSendChatMsgToReq) (*ChatSendChatMsgToRes, error)
	ChatGetChatConvId(context.Context, *ChatGetChatConvIdReq) (*ChatGetChatConvIdRes, error)
	mustEmbedUnimplementedGrpcApiServer()
}

// UnimplementedGrpcApiServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcApiServer struct {
}

func (UnimplementedGrpcApiServer) SessUserLogin(context.Context, *SessUserLoginReq) (*SessUserLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessUserLogin not implemented")
}
func (UnimplementedGrpcApiServer) SessUserLogout(context.Context, *SessUserLogoutReq) (*SessUserLogoutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessUserLogout not implemented")
}
func (UnimplementedGrpcApiServer) UmRegister(context.Context, *UmRegisterReq) (*UmRegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmRegister not implemented")
}
func (UnimplementedGrpcApiServer) UmUnregister(context.Context, *UmUnregisterReq) (*UmUnregisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmUnregister not implemented")
}
func (UnimplementedGrpcApiServer) UmAddFriends(context.Context, *UmAddFriendsReq) (*UmAddFriendsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmAddFriends not implemented")
}
func (UnimplementedGrpcApiServer) UmDelFriends(context.Context, *UmDelFriendsReq) (*UmDelFriendsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmDelFriends not implemented")
}
func (UnimplementedGrpcApiServer) UmListFriends(context.Context, *UmListFriendsReq) (*UmListFriendsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmListFriends not implemented")
}
func (UnimplementedGrpcApiServer) ChatGetChatMsg(context.Context, *ChatGetChatMsgReq) (*ChatGetChatMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatMsg not implemented")
}
func (UnimplementedGrpcApiServer) ChatGetChatMsgHistWith(context.Context, *ChatGetChatMsgHistWithReq) (*ChatGetChatMsgHistWithRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatMsgHistWith not implemented")
}
func (UnimplementedGrpcApiServer) ChatSendChatMsgTo(context.Context, *ChatSendChatMsgToReq) (*ChatSendChatMsgToRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSendChatMsgTo not implemented")
}
func (UnimplementedGrpcApiServer) ChatGetChatConvId(context.Context, *ChatGetChatConvIdReq) (*ChatGetChatConvIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatConvId not implemented")
}
func (UnimplementedGrpcApiServer) mustEmbedUnimplementedGrpcApiServer() {}

// UnsafeGrpcApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcApiServer will
// result in compilation errors.
type UnsafeGrpcApiServer interface {
	mustEmbedUnimplementedGrpcApiServer()
}

func RegisterGrpcApiServer(s grpc.ServiceRegistrar, srv GrpcApiServer) {
	s.RegisterService(&GrpcApi_ServiceDesc, srv)
}

func _GrpcApi_SessUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).SessUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/SessUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).SessUserLogin(ctx, req.(*SessUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_SessUserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessUserLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).SessUserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/SessUserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).SessUserLogout(ctx, req.(*SessUserLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmRegister(ctx, req.(*UmRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmUnregisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmUnregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmUnregister(ctx, req.(*UmUnregisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmAddFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmAddFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmAddFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmAddFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmAddFriends(ctx, req.(*UmAddFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmDelFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmDelFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmDelFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmDelFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmDelFriends(ctx, req.(*UmDelFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmListFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmListFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmListFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmListFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmListFriends(ctx, req.(*UmListFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_ChatGetChatMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatGetChatMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).ChatGetChatMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/ChatGetChatMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).ChatGetChatMsg(ctx, req.(*ChatGetChatMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_ChatGetChatMsgHistWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatGetChatMsgHistWithReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).ChatGetChatMsgHistWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/ChatGetChatMsgHistWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).ChatGetChatMsgHistWith(ctx, req.(*ChatGetChatMsgHistWithReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_ChatSendChatMsgTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatSendChatMsgToReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).ChatSendChatMsgTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/ChatSendChatMsgTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).ChatSendChatMsgTo(ctx, req.(*ChatSendChatMsgToReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_ChatGetChatConvId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatGetChatConvIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).ChatGetChatConvId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/ChatGetChatConvId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).ChatGetChatConvId(ctx, req.(*ChatGetChatConvIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcApi_ServiceDesc is the grpc.ServiceDesc for GrpcApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen_grpc.GrpcApi",
	HandlerType: (*GrpcApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessUserLogin",
			Handler:    _GrpcApi_SessUserLogin_Handler,
		},
		{
			MethodName: "SessUserLogout",
			Handler:    _GrpcApi_SessUserLogout_Handler,
		},
		{
			MethodName: "UmRegister",
			Handler:    _GrpcApi_UmRegister_Handler,
		},
		{
			MethodName: "UmUnregister",
			Handler:    _GrpcApi_UmUnregister_Handler,
		},
		{
			MethodName: "UmAddFriends",
			Handler:    _GrpcApi_UmAddFriends_Handler,
		},
		{
			MethodName: "UmDelFriends",
			Handler:    _GrpcApi_UmDelFriends_Handler,
		},
		{
			MethodName: "UmListFriends",
			Handler:    _GrpcApi_UmListFriends_Handler,
		},
		{
			MethodName: "ChatGetChatMsg",
			Handler:    _GrpcApi_ChatGetChatMsg_Handler,
		},
		{
			MethodName: "ChatGetChatMsgHistWith",
			Handler:    _GrpcApi_ChatGetChatMsgHistWith_Handler,
		},
		{
			MethodName: "ChatSendChatMsgTo",
			Handler:    _GrpcApi_ChatSendChatMsgTo_Handler,
		},
		{
			MethodName: "ChatGetChatConvId",
			Handler:    _GrpcApi_ChatGetChatConvId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
