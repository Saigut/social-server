// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: api.proto

package gen_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcApiClient is the client API for GrpcApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcApiClient interface {
	// 会话
	SessUserLogin(ctx context.Context, in *SessUserLoginReq, opts ...grpc.CallOption) (*SessUserLoginRes, error)
	SessUserLogout(ctx context.Context, in *SessUserLogoutReq, opts ...grpc.CallOption) (*SessUserLogoutRes, error)
	// 用户管理
	UmRegister(ctx context.Context, in *UmRegisterReq, opts ...grpc.CallOption) (*UmRegisterRes, error)
	UmUnregister(ctx context.Context, in *UmUnregisterReq, opts ...grpc.CallOption) (*UmUnregisterRes, error)
	UmUserUpdateInfo(ctx context.Context, in *UmUserUpdateInfoReq, opts ...grpc.CallOption) (*UmUserUpdateInfoRes, error)
	// 联系人
	UmContactGetList(ctx context.Context, in *UmContactGetListReq, opts ...grpc.CallOption) (*UmContactGetListRes, error)
	UmContactGetInfo(ctx context.Context, in *UmContactGetInfoReq, opts ...grpc.CallOption) (*UmContactGetInfoRes, error)
	UmContactFind(ctx context.Context, in *UmContactFindReq, opts ...grpc.CallOption) (*UmContactFindRes, error)
	UmContactAddRequest(ctx context.Context, in *UmContactAddRequestReq, opts ...grpc.CallOption) (*UmContactAddRequestRes, error)
	UmContactAccept(ctx context.Context, in *UmContactAcceptReq, opts ...grpc.CallOption) (*UmContactAcceptRes, error)
	UmContactReject(ctx context.Context, in *UmContactRejectReq, opts ...grpc.CallOption) (*UmContactRejectRes, error)
	UmContactDel(ctx context.Context, in *UmContactDelReq, opts ...grpc.CallOption) (*UmContactDelRes, error)
	// 群组
	UmGroupGetList(ctx context.Context, in *UmGroupGetListReq, opts ...grpc.CallOption) (*UmGroupGetListRes, error)
	UmGroupGetInfo(ctx context.Context, in *UmGroupGetInfoReq, opts ...grpc.CallOption) (*UmGroupGetInfoRes, error)
	UmGroupUpdateInfo(ctx context.Context, in *UmGroupUpdateInfoReq, opts ...grpc.CallOption) (*UmGroupUpdateInfoRes, error)
	UmGroupFind(ctx context.Context, in *UmGroupFindReq, opts ...grpc.CallOption) (*UmGroupFindRes, error)
	UmGroupCreate(ctx context.Context, in *UmGroupCreateReq, opts ...grpc.CallOption) (*UmGroupCreateRes, error)
	UmGroupDelete(ctx context.Context, in *UmGroupDeleteReq, opts ...grpc.CallOption) (*UmGroupDeleteRes, error)
	UmGroupGetMemList(ctx context.Context, in *UmGroupGetMemListReq, opts ...grpc.CallOption) (*UmGroupGetMemListRes, error)
	UmGroupJoinRequest(ctx context.Context, in *UmGroupJoinRequestReq, opts ...grpc.CallOption) (*UmGroupJoinRequestRes, error)
	UmGroupAccept(ctx context.Context, in *UmGroupAcceptReq, opts ...grpc.CallOption) (*UmGroupAcceptRes, error)
	UmGroupReject(ctx context.Context, in *UmGroupRejectReq, opts ...grpc.CallOption) (*UmGroupRejectRes, error)
	UmGroupLeave(ctx context.Context, in *UmGroupLeaveReq, opts ...grpc.CallOption) (*UmGroupLeaveRes, error)
	UmGroupAddMem(ctx context.Context, in *UmGroupAddMemReq, opts ...grpc.CallOption) (*UmGroupAddMemRes, error)
	UmGroupDelMem(ctx context.Context, in *UmGroupDelMemReq, opts ...grpc.CallOption) (*UmGroupDelMemRes, error)
	UmGroupUpdateMem(ctx context.Context, in *UmGroupUpdateMemReq, opts ...grpc.CallOption) (*UmGroupUpdateMemRes, error)
	// 聊天
	ChatSendMsg(ctx context.Context, in *ChatSendMsgReq, opts ...grpc.CallOption) (*ChatSendMsgRes, error)
	ChatMarkRead(ctx context.Context, in *ChatMarkReadReq, opts ...grpc.CallOption) (*ChatMarkReadRes, error)
	// 更新事件
	GetUpdateList(ctx context.Context, in *GetUpdateListReq, opts ...grpc.CallOption) (*GetUpdateListRes, error)
}

type grpcApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcApiClient(cc grpc.ClientConnInterface) GrpcApiClient {
	return &grpcApiClient{cc}
}

func (c *grpcApiClient) SessUserLogin(ctx context.Context, in *SessUserLoginReq, opts ...grpc.CallOption) (*SessUserLoginRes, error) {
	out := new(SessUserLoginRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/SessUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) SessUserLogout(ctx context.Context, in *SessUserLogoutReq, opts ...grpc.CallOption) (*SessUserLogoutRes, error) {
	out := new(SessUserLogoutRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/SessUserLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmRegister(ctx context.Context, in *UmRegisterReq, opts ...grpc.CallOption) (*UmRegisterRes, error) {
	out := new(UmRegisterRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmUnregister(ctx context.Context, in *UmUnregisterReq, opts ...grpc.CallOption) (*UmUnregisterRes, error) {
	out := new(UmUnregisterRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmUnregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmUserUpdateInfo(ctx context.Context, in *UmUserUpdateInfoReq, opts ...grpc.CallOption) (*UmUserUpdateInfoRes, error) {
	out := new(UmUserUpdateInfoRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmUserUpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmContactGetList(ctx context.Context, in *UmContactGetListReq, opts ...grpc.CallOption) (*UmContactGetListRes, error) {
	out := new(UmContactGetListRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmContactGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmContactGetInfo(ctx context.Context, in *UmContactGetInfoReq, opts ...grpc.CallOption) (*UmContactGetInfoRes, error) {
	out := new(UmContactGetInfoRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmContactGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmContactFind(ctx context.Context, in *UmContactFindReq, opts ...grpc.CallOption) (*UmContactFindRes, error) {
	out := new(UmContactFindRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmContactFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmContactAddRequest(ctx context.Context, in *UmContactAddRequestReq, opts ...grpc.CallOption) (*UmContactAddRequestRes, error) {
	out := new(UmContactAddRequestRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmContactAddRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmContactAccept(ctx context.Context, in *UmContactAcceptReq, opts ...grpc.CallOption) (*UmContactAcceptRes, error) {
	out := new(UmContactAcceptRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmContactAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmContactReject(ctx context.Context, in *UmContactRejectReq, opts ...grpc.CallOption) (*UmContactRejectRes, error) {
	out := new(UmContactRejectRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmContactReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmContactDel(ctx context.Context, in *UmContactDelReq, opts ...grpc.CallOption) (*UmContactDelRes, error) {
	out := new(UmContactDelRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmContactDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupGetList(ctx context.Context, in *UmGroupGetListReq, opts ...grpc.CallOption) (*UmGroupGetListRes, error) {
	out := new(UmGroupGetListRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupGetInfo(ctx context.Context, in *UmGroupGetInfoReq, opts ...grpc.CallOption) (*UmGroupGetInfoRes, error) {
	out := new(UmGroupGetInfoRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupUpdateInfo(ctx context.Context, in *UmGroupUpdateInfoReq, opts ...grpc.CallOption) (*UmGroupUpdateInfoRes, error) {
	out := new(UmGroupUpdateInfoRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupUpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupFind(ctx context.Context, in *UmGroupFindReq, opts ...grpc.CallOption) (*UmGroupFindRes, error) {
	out := new(UmGroupFindRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupCreate(ctx context.Context, in *UmGroupCreateReq, opts ...grpc.CallOption) (*UmGroupCreateRes, error) {
	out := new(UmGroupCreateRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupDelete(ctx context.Context, in *UmGroupDeleteReq, opts ...grpc.CallOption) (*UmGroupDeleteRes, error) {
	out := new(UmGroupDeleteRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupGetMemList(ctx context.Context, in *UmGroupGetMemListReq, opts ...grpc.CallOption) (*UmGroupGetMemListRes, error) {
	out := new(UmGroupGetMemListRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupGetMemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupJoinRequest(ctx context.Context, in *UmGroupJoinRequestReq, opts ...grpc.CallOption) (*UmGroupJoinRequestRes, error) {
	out := new(UmGroupJoinRequestRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupJoinRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupAccept(ctx context.Context, in *UmGroupAcceptReq, opts ...grpc.CallOption) (*UmGroupAcceptRes, error) {
	out := new(UmGroupAcceptRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupReject(ctx context.Context, in *UmGroupRejectReq, opts ...grpc.CallOption) (*UmGroupRejectRes, error) {
	out := new(UmGroupRejectRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupLeave(ctx context.Context, in *UmGroupLeaveReq, opts ...grpc.CallOption) (*UmGroupLeaveRes, error) {
	out := new(UmGroupLeaveRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupAddMem(ctx context.Context, in *UmGroupAddMemReq, opts ...grpc.CallOption) (*UmGroupAddMemRes, error) {
	out := new(UmGroupAddMemRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupAddMem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupDelMem(ctx context.Context, in *UmGroupDelMemReq, opts ...grpc.CallOption) (*UmGroupDelMemRes, error) {
	out := new(UmGroupDelMemRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupDelMem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) UmGroupUpdateMem(ctx context.Context, in *UmGroupUpdateMemReq, opts ...grpc.CallOption) (*UmGroupUpdateMemRes, error) {
	out := new(UmGroupUpdateMemRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/UmGroupUpdateMem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) ChatSendMsg(ctx context.Context, in *ChatSendMsgReq, opts ...grpc.CallOption) (*ChatSendMsgRes, error) {
	out := new(ChatSendMsgRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/ChatSendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) ChatMarkRead(ctx context.Context, in *ChatMarkReadReq, opts ...grpc.CallOption) (*ChatMarkReadRes, error) {
	out := new(ChatMarkReadRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/ChatMarkRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcApiClient) GetUpdateList(ctx context.Context, in *GetUpdateListReq, opts ...grpc.CallOption) (*GetUpdateListRes, error) {
	out := new(GetUpdateListRes)
	err := c.cc.Invoke(ctx, "/gen_grpc.GrpcApi/GetUpdateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcApiServer is the server API for GrpcApi service.
// All implementations must embed UnimplementedGrpcApiServer
// for forward compatibility
type GrpcApiServer interface {
	// 会话
	SessUserLogin(context.Context, *SessUserLoginReq) (*SessUserLoginRes, error)
	SessUserLogout(context.Context, *SessUserLogoutReq) (*SessUserLogoutRes, error)
	// 用户管理
	UmRegister(context.Context, *UmRegisterReq) (*UmRegisterRes, error)
	UmUnregister(context.Context, *UmUnregisterReq) (*UmUnregisterRes, error)
	UmUserUpdateInfo(context.Context, *UmUserUpdateInfoReq) (*UmUserUpdateInfoRes, error)
	// 联系人
	UmContactGetList(context.Context, *UmContactGetListReq) (*UmContactGetListRes, error)
	UmContactGetInfo(context.Context, *UmContactGetInfoReq) (*UmContactGetInfoRes, error)
	UmContactFind(context.Context, *UmContactFindReq) (*UmContactFindRes, error)
	UmContactAddRequest(context.Context, *UmContactAddRequestReq) (*UmContactAddRequestRes, error)
	UmContactAccept(context.Context, *UmContactAcceptReq) (*UmContactAcceptRes, error)
	UmContactReject(context.Context, *UmContactRejectReq) (*UmContactRejectRes, error)
	UmContactDel(context.Context, *UmContactDelReq) (*UmContactDelRes, error)
	// 群组
	UmGroupGetList(context.Context, *UmGroupGetListReq) (*UmGroupGetListRes, error)
	UmGroupGetInfo(context.Context, *UmGroupGetInfoReq) (*UmGroupGetInfoRes, error)
	UmGroupUpdateInfo(context.Context, *UmGroupUpdateInfoReq) (*UmGroupUpdateInfoRes, error)
	UmGroupFind(context.Context, *UmGroupFindReq) (*UmGroupFindRes, error)
	UmGroupCreate(context.Context, *UmGroupCreateReq) (*UmGroupCreateRes, error)
	UmGroupDelete(context.Context, *UmGroupDeleteReq) (*UmGroupDeleteRes, error)
	UmGroupGetMemList(context.Context, *UmGroupGetMemListReq) (*UmGroupGetMemListRes, error)
	UmGroupJoinRequest(context.Context, *UmGroupJoinRequestReq) (*UmGroupJoinRequestRes, error)
	UmGroupAccept(context.Context, *UmGroupAcceptReq) (*UmGroupAcceptRes, error)
	UmGroupReject(context.Context, *UmGroupRejectReq) (*UmGroupRejectRes, error)
	UmGroupLeave(context.Context, *UmGroupLeaveReq) (*UmGroupLeaveRes, error)
	UmGroupAddMem(context.Context, *UmGroupAddMemReq) (*UmGroupAddMemRes, error)
	UmGroupDelMem(context.Context, *UmGroupDelMemReq) (*UmGroupDelMemRes, error)
	UmGroupUpdateMem(context.Context, *UmGroupUpdateMemReq) (*UmGroupUpdateMemRes, error)
	// 聊天
	ChatSendMsg(context.Context, *ChatSendMsgReq) (*ChatSendMsgRes, error)
	ChatMarkRead(context.Context, *ChatMarkReadReq) (*ChatMarkReadRes, error)
	// 更新事件
	GetUpdateList(context.Context, *GetUpdateListReq) (*GetUpdateListRes, error)
	mustEmbedUnimplementedGrpcApiServer()
}

// UnimplementedGrpcApiServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcApiServer struct {
}

func (UnimplementedGrpcApiServer) SessUserLogin(context.Context, *SessUserLoginReq) (*SessUserLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessUserLogin not implemented")
}
func (UnimplementedGrpcApiServer) SessUserLogout(context.Context, *SessUserLogoutReq) (*SessUserLogoutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessUserLogout not implemented")
}
func (UnimplementedGrpcApiServer) UmRegister(context.Context, *UmRegisterReq) (*UmRegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmRegister not implemented")
}
func (UnimplementedGrpcApiServer) UmUnregister(context.Context, *UmUnregisterReq) (*UmUnregisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmUnregister not implemented")
}
func (UnimplementedGrpcApiServer) UmUserUpdateInfo(context.Context, *UmUserUpdateInfoReq) (*UmUserUpdateInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmUserUpdateInfo not implemented")
}
func (UnimplementedGrpcApiServer) UmContactGetList(context.Context, *UmContactGetListReq) (*UmContactGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmContactGetList not implemented")
}
func (UnimplementedGrpcApiServer) UmContactGetInfo(context.Context, *UmContactGetInfoReq) (*UmContactGetInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmContactGetInfo not implemented")
}
func (UnimplementedGrpcApiServer) UmContactFind(context.Context, *UmContactFindReq) (*UmContactFindRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmContactFind not implemented")
}
func (UnimplementedGrpcApiServer) UmContactAddRequest(context.Context, *UmContactAddRequestReq) (*UmContactAddRequestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmContactAddRequest not implemented")
}
func (UnimplementedGrpcApiServer) UmContactAccept(context.Context, *UmContactAcceptReq) (*UmContactAcceptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmContactAccept not implemented")
}
func (UnimplementedGrpcApiServer) UmContactReject(context.Context, *UmContactRejectReq) (*UmContactRejectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmContactReject not implemented")
}
func (UnimplementedGrpcApiServer) UmContactDel(context.Context, *UmContactDelReq) (*UmContactDelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmContactDel not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupGetList(context.Context, *UmGroupGetListReq) (*UmGroupGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupGetList not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupGetInfo(context.Context, *UmGroupGetInfoReq) (*UmGroupGetInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupGetInfo not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupUpdateInfo(context.Context, *UmGroupUpdateInfoReq) (*UmGroupUpdateInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupUpdateInfo not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupFind(context.Context, *UmGroupFindReq) (*UmGroupFindRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupFind not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupCreate(context.Context, *UmGroupCreateReq) (*UmGroupCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupCreate not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupDelete(context.Context, *UmGroupDeleteReq) (*UmGroupDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupDelete not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupGetMemList(context.Context, *UmGroupGetMemListReq) (*UmGroupGetMemListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupGetMemList not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupJoinRequest(context.Context, *UmGroupJoinRequestReq) (*UmGroupJoinRequestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupJoinRequest not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupAccept(context.Context, *UmGroupAcceptReq) (*UmGroupAcceptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupAccept not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupReject(context.Context, *UmGroupRejectReq) (*UmGroupRejectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupReject not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupLeave(context.Context, *UmGroupLeaveReq) (*UmGroupLeaveRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupLeave not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupAddMem(context.Context, *UmGroupAddMemReq) (*UmGroupAddMemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupAddMem not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupDelMem(context.Context, *UmGroupDelMemReq) (*UmGroupDelMemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupDelMem not implemented")
}
func (UnimplementedGrpcApiServer) UmGroupUpdateMem(context.Context, *UmGroupUpdateMemReq) (*UmGroupUpdateMemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UmGroupUpdateMem not implemented")
}
func (UnimplementedGrpcApiServer) ChatSendMsg(context.Context, *ChatSendMsgReq) (*ChatSendMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSendMsg not implemented")
}
func (UnimplementedGrpcApiServer) ChatMarkRead(context.Context, *ChatMarkReadReq) (*ChatMarkReadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatMarkRead not implemented")
}
func (UnimplementedGrpcApiServer) GetUpdateList(context.Context, *GetUpdateListReq) (*GetUpdateListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateList not implemented")
}
func (UnimplementedGrpcApiServer) mustEmbedUnimplementedGrpcApiServer() {}

// UnsafeGrpcApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcApiServer will
// result in compilation errors.
type UnsafeGrpcApiServer interface {
	mustEmbedUnimplementedGrpcApiServer()
}

func RegisterGrpcApiServer(s grpc.ServiceRegistrar, srv GrpcApiServer) {
	s.RegisterService(&GrpcApi_ServiceDesc, srv)
}

func _GrpcApi_SessUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).SessUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/SessUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).SessUserLogin(ctx, req.(*SessUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_SessUserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessUserLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).SessUserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/SessUserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).SessUserLogout(ctx, req.(*SessUserLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmRegister(ctx, req.(*UmRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmUnregisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmUnregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmUnregister(ctx, req.(*UmUnregisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmUserUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmUserUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmUserUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmUserUpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmUserUpdateInfo(ctx, req.(*UmUserUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmContactGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmContactGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmContactGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmContactGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmContactGetList(ctx, req.(*UmContactGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmContactGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmContactGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmContactGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmContactGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmContactGetInfo(ctx, req.(*UmContactGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmContactFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmContactFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmContactFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmContactFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmContactFind(ctx, req.(*UmContactFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmContactAddRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmContactAddRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmContactAddRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmContactAddRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmContactAddRequest(ctx, req.(*UmContactAddRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmContactAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmContactAcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmContactAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmContactAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmContactAccept(ctx, req.(*UmContactAcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmContactReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmContactRejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmContactReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmContactReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmContactReject(ctx, req.(*UmContactRejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmContactDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmContactDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmContactDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmContactDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmContactDel(ctx, req.(*UmContactDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupGetList(ctx, req.(*UmGroupGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupGetInfo(ctx, req.(*UmGroupGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupUpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupUpdateInfo(ctx, req.(*UmGroupUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupFind(ctx, req.(*UmGroupFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupCreate(ctx, req.(*UmGroupCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupDelete(ctx, req.(*UmGroupDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupGetMemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupGetMemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupGetMemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupGetMemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupGetMemList(ctx, req.(*UmGroupGetMemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupJoinRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupJoinRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupJoinRequest(ctx, req.(*UmGroupJoinRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupAcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupAccept(ctx, req.(*UmGroupAcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupRejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupReject(ctx, req.(*UmGroupRejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupLeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupLeave(ctx, req.(*UmGroupLeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupAddMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupAddMemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupAddMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupAddMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupAddMem(ctx, req.(*UmGroupAddMemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupDelMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupDelMemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupDelMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupDelMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupDelMem(ctx, req.(*UmGroupDelMemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_UmGroupUpdateMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UmGroupUpdateMemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).UmGroupUpdateMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/UmGroupUpdateMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).UmGroupUpdateMem(ctx, req.(*UmGroupUpdateMemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_ChatSendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatSendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).ChatSendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/ChatSendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).ChatSendMsg(ctx, req.(*ChatSendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_ChatMarkRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMarkReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).ChatMarkRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/ChatMarkRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).ChatMarkRead(ctx, req.(*ChatMarkReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcApi_GetUpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcApiServer).GetUpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen_grpc.GrpcApi/GetUpdateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcApiServer).GetUpdateList(ctx, req.(*GetUpdateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcApi_ServiceDesc is the grpc.ServiceDesc for GrpcApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen_grpc.GrpcApi",
	HandlerType: (*GrpcApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessUserLogin",
			Handler:    _GrpcApi_SessUserLogin_Handler,
		},
		{
			MethodName: "SessUserLogout",
			Handler:    _GrpcApi_SessUserLogout_Handler,
		},
		{
			MethodName: "UmRegister",
			Handler:    _GrpcApi_UmRegister_Handler,
		},
		{
			MethodName: "UmUnregister",
			Handler:    _GrpcApi_UmUnregister_Handler,
		},
		{
			MethodName: "UmUserUpdateInfo",
			Handler:    _GrpcApi_UmUserUpdateInfo_Handler,
		},
		{
			MethodName: "UmContactGetList",
			Handler:    _GrpcApi_UmContactGetList_Handler,
		},
		{
			MethodName: "UmContactGetInfo",
			Handler:    _GrpcApi_UmContactGetInfo_Handler,
		},
		{
			MethodName: "UmContactFind",
			Handler:    _GrpcApi_UmContactFind_Handler,
		},
		{
			MethodName: "UmContactAddRequest",
			Handler:    _GrpcApi_UmContactAddRequest_Handler,
		},
		{
			MethodName: "UmContactAccept",
			Handler:    _GrpcApi_UmContactAccept_Handler,
		},
		{
			MethodName: "UmContactReject",
			Handler:    _GrpcApi_UmContactReject_Handler,
		},
		{
			MethodName: "UmContactDel",
			Handler:    _GrpcApi_UmContactDel_Handler,
		},
		{
			MethodName: "UmGroupGetList",
			Handler:    _GrpcApi_UmGroupGetList_Handler,
		},
		{
			MethodName: "UmGroupGetInfo",
			Handler:    _GrpcApi_UmGroupGetInfo_Handler,
		},
		{
			MethodName: "UmGroupUpdateInfo",
			Handler:    _GrpcApi_UmGroupUpdateInfo_Handler,
		},
		{
			MethodName: "UmGroupFind",
			Handler:    _GrpcApi_UmGroupFind_Handler,
		},
		{
			MethodName: "UmGroupCreate",
			Handler:    _GrpcApi_UmGroupCreate_Handler,
		},
		{
			MethodName: "UmGroupDelete",
			Handler:    _GrpcApi_UmGroupDelete_Handler,
		},
		{
			MethodName: "UmGroupGetMemList",
			Handler:    _GrpcApi_UmGroupGetMemList_Handler,
		},
		{
			MethodName: "UmGroupJoinRequest",
			Handler:    _GrpcApi_UmGroupJoinRequest_Handler,
		},
		{
			MethodName: "UmGroupAccept",
			Handler:    _GrpcApi_UmGroupAccept_Handler,
		},
		{
			MethodName: "UmGroupReject",
			Handler:    _GrpcApi_UmGroupReject_Handler,
		},
		{
			MethodName: "UmGroupLeave",
			Handler:    _GrpcApi_UmGroupLeave_Handler,
		},
		{
			MethodName: "UmGroupAddMem",
			Handler:    _GrpcApi_UmGroupAddMem_Handler,
		},
		{
			MethodName: "UmGroupDelMem",
			Handler:    _GrpcApi_UmGroupDelMem_Handler,
		},
		{
			MethodName: "UmGroupUpdateMem",
			Handler:    _GrpcApi_UmGroupUpdateMem_Handler,
		},
		{
			MethodName: "ChatSendMsg",
			Handler:    _GrpcApi_ChatSendMsg_Handler,
		},
		{
			MethodName: "ChatMarkRead",
			Handler:    _GrpcApi_ChatMarkRead_Handler,
		},
		{
			MethodName: "GetUpdateList",
			Handler:    _GrpcApi_GetUpdateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
